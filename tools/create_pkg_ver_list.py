import os
import xml.etree.cElementTree as ET
from datetime import datetime
import re
import xmlpp
from operator import itemgetter
import argparse

parser = argparse.ArgumentParser(description='WPKG-GP Client updates list generator')
parser.add_argument('-f', '--folder', help='WPKG root directory', required=True)
parser.add_argument('-o', '--output', help='Output filename', required=True)
args = parser.parse_args()

input_folder = args.folder
output_file = args.output

def create_package_list(path):
    def resolve_version(child, pkg_version):
        variable = re.compile('(%.+?%)').findall(pkg_version)
        variable = ''.join(variable)
        variable_name = re.sub('%', '', variable)
        value = 'None'
        try:
            for entry in child.iterfind('variable[@name="{}"]'.format(variable_name)):
                value = entry.attrib['value']
            return (variable, value)
        except TypeError:
            return (variable, value)
    packages_dir = os.path.join(path, 'packages')
    xmls = [(os.path.join(dp, f), f[:-4]) for dp, dn, fn in os.walk(os.path.expanduser(packages_dir)) for f in fn if f.endswith('.xml')]
    '''
    every directory in the specified path holds a tuple with 3 list of information that os.walk spits out
    dp = current directory path
    dn = subdirectories
    fn = filenames in the current directory

    The listcomprehension above gets the info of every directory and if the filenames in the directories end with .xml it will store
    it in another tuple together with complete path to the file
    '''
    xmls.append([os.path.join(path, 'packages.xml'), ""])
    remote_packages = []
    for entry in xmls:
        try:
            tree = ET.parse(entry[0])
        except IOError as e:
            print(e)
            continue
        else:
            root = tree.getroot()
            for child in root.iter('package'):
                pkg_id = child.attrib['id']
                if pkg_id == "ShortPackageID":
                    continue
                pkg_version = child.attrib['revision']
                if '%' in pkg_version:
                    variable, value = resolve_version(child, pkg_version)
                    if '%' in value:
                        variable2, value2 = resolve_version(child, value)
                        value = re.sub(variable2, value2, value)
                    pkg_version = re.sub (variable, value, pkg_version)
                remote_packages.append((pkg_id, pkg_version))

    remote_packages = sorted(remote_packages, key=itemgetter(0)) # Sort the List
    return remote_packages


def create_xml(file, packages):
    root = ET.Element('packages')
    date = datetime.now().strftime("%Y-%m-%d %H:%M")
    root.set('date', date)  # Set File Date
    comment = ET.Comment('Generated by python....')
    root.append(comment)
    for entry in packages:
        package = ET.Element('package')
        package.set('id', entry[0])
        package.set('version', entry[1])
        root.append(package)
    xml = "<?xml version='1.0' encoding='UTF-8'?>" + ET.tostring(root, encoding='utf-8', method='xml')
    outputfile = open(file, 'w')
    xmlpp.pprint(xml, output=outputfile)
    outputfile.close()

packages = create_package_list(input_folder)
create_xml(output_file, packages)
